#include "tf_cpp_apis.h"

#include <cassert>

namespace tf_cpp_apis {

// https://www.tensorflow.org/api_docs/cc

std::set<std::string> array_ops = {
    "BatchToSpace",
    "BatchToSpaceND",
    "Bitcast",
    "BroadcastDynamicShape",
    "BroadcastTo",
    "CheckNumerics",
    "Concat",
    "ConjugateTranspose",
    "DebugGradientIdentity",
    "DebugGradientRefIdentity",
    "DeepCopy",
    "DepthToSpace",
    "Dequantize",
    "Diag",
    "DiagPart",
    "EditDistance",
    "Empty",
    "EnsureShape",
    "ExpandDims",
    "ExtractImagePatches",
    "ExtractVolumePatches",
    "FakeQuantWithMinMaxArgs",
    "FakeQuantWithMinMaxArgsGradient",
    "FakeQuantWithMinMaxVars",
    "FakeQuantWithMinMaxVarsGradient",
    "FakeQuantWithMinMaxVarsPerChannel",
    "FakeQuantWithMinMaxVarsPerChannelGradient",
    "Fill",
    "Fingerprint",
    "Gather",
    "GatherNd",
    "GatherV2",
    "GuaranteeConst",
    "Identity",
    "IdentityN",
    "ImmutableConst",
    "InplaceAdd",
    "InplaceSub",
    "InplaceUpdate",
    "InvertPermutation",
    "MatrixBandPart",
    "MatrixDiag",
    "MatrixDiagPart",
    "MatrixDiagPartV2",
    "MatrixDiagPartV3",
    "MatrixDiagV2",
    "MatrixDiagV3",
    "MatrixSetDiag",
    "MatrixSetDiagV2",
    "MatrixSetDiagV3",
    "MirrorPad",
    "OneHot",
    "OnesLike",
    "Pad",
    "PadV2",
    "ParallelConcat",
    "Placeholder",
    "PlaceholderWithDefault",
    "PreventGradient",
    "QuantizeAndDequantizeV2",
    "QuantizeAndDequantizeV3",
    "QuantizeAndDequantizeV4",
    "QuantizeAndDequantizeV4Grad",
    "QuantizeV2",
    "QuantizedConcat",
    "QuantizedInstanceNorm",
    "SetDiff1D",
    "Stack",
    "Where",
    "ZerosLike",
};

std::set<std::string> candidate_sampling_ops = {
    "AllCandidateSampler",          "ComputeAccidentalHits",
    "FixedUnigramCandidateSampler", "LearnedUnigramCandidateSampler",
    "LogUniformCandidateSampler",   "UniformCandidateSampler",
};

std::set<std::string> control_flow_ops = {
    "Abort",     "ControlTrigger", "LoopCond",
    "Merge",     "NextIteration",  "RefNextIteration",
    "RefSelect", "RefSwitch",      "Switch",
};

std::set<std::string> data_flow_ops = {
    "AccumulatorApplyGradient",
    "AccumulatorNumAccumulated",
    "AccumulatorSetGlobalStep",
    "AccumulatorTakeGradient",
    "Barrier",
    "BarrierClose",
    "BarrierIncompleteSize",
    "BarrierInsertMany",
    "BarrierReadySize",
    "BarrierTakeMany",
    "ConditionalAccumulator",
    "DeleteSessionTensor",
    "DynamicPartition",
    "DynamicStitch",
    "FIFOQueue",
    "GetSessionHandle",
    "GetSessionHandleV2",
    "GetSessionTensor",
    "MapClear",
    "MapIncompleteSize",
    "MapPeek",
    "MapSize",
    "MapStage",
    "MapUnstage",
    "MapUnstageNoKey",
    "OrderedMapClear",
    "OrderedMapIncompleteSize",
    "OrderedMapPeek",
    "OrderedMapSize",
    "OrderedMapStage",
    "OrderedMapUnstage",
    "OrderedMapUnstageNoKey",
    "PaddingFIFOQueue",
    "ParallelDynamicStitch",
    "PriorityQueue",
    "QueueClose",
    "QueueDequeue",
    "QueueDequeueMany",
    "QueueDequeueUpTo",
    "QueueEnqueue",
    "QueueEnqueueMany",
    "QueueIsClosed",
    "QueueIsClosedV2",
    "QueueSize",
    "RandomShuffleQueue",
    "RecordInput",
    "SparseAccumulatorApplyGradient",
    "SparseAccumulatorTakeGradient",
    "SparseConditionalAccumulator",
    "Stage",
    "StageClear",
    "StagePeek",
    "StageSize",
    "TensorArray",
    "TensorArrayClose",
    "TensorArrayConcat",
    "TensorArrayGather",
    "TensorArrayGrad",
    "TensorArrayGradWithShape",
    "TensorArrayRead",
    "TensorArrayScatter",
    "TensorArraySize",
    "TensorArraySplit",
    "TensorArrayWrite",
    "Unstage",
};

std::set<std::string> image_ops = {
    "AdjustContrast",
    "AdjustHue",
    "AdjustSaturation",
    "CombinedNonMaxSuppression",
    "CropAndResize",
    "CropAndResizeGradBoxes",
    "CropAndResizeGradImage",
    "DecodeAndCropJpeg",
    "DecodeBmp",
    "DecodeGif",
    "DecodeImage",
    "DecodeJpeg",
    "DecodePng",
    "DrawBoundingBoxes",
    "DrawBoundingBoxesV2",
    "EncodeJpeg",
    "EncodeJpegVariableQuality",
    "EncodePng",
    "ExtractGlimpse",
    "ExtractJpegShape",
    "HSVToRGB",
    "NonMaxSuppression",
    "NonMaxSuppressionV2",
    "NonMaxSuppressionV3",
    "NonMaxSuppressionV4",
    "NonMaxSuppressionV5",
    "NonMaxSuppressionWithOverlaps",
    "QuantizedResizeBilinear",
    "RGBToHSV",
    "ResizeArea",
    "ResizeBicubic",
    "ResizeBilinear",
    "ResizeNearestNeighbor",
    "SampleDistortedBoundingBox",
    "SampleDistortedBoundingBoxV2",
    "ScaleAndTranslate",
    "StatelessSampleDistortedBoundingBox",
};

std::set<std::string> io_ops = {
    "FixedLengthRecordReader",
    "IdentityReader",
    "LMDBReader",
    "MatchingFiles",
    "MergeV2Checkpoints",
    "ReadFile",
    "ReaderNumRecordsProduced",
    "ReaderNumWorkUnitsCompleted",
    "ReaderRead",
    "ReaderReadUpTo",
    "ReaderReset",
    "ReaderRestoreState",
    "ReaderSerializeState",
    "Restore",
    "RestoreSlice",
    "RestoreV2",
    "Save",
    "SaveSlices",
    "SaveV2",
    "ShardedFilename",
    "ShardedFilespec",
    "TFRecordReader",
    "TextLineReader",
    "WholeFileReader",
    "WriteFile",
};

std::set<std::string> logging_ops = {
    "Assert",        "HistogramSummary", "MergeSummary",
    "Print",         "PrintV2",          "ScalarSummary",
    "TensorSummary", "TensorSummaryV2",  "Timestamp",
};

std::set<std::string> math_ops = {
    "Abs",
    "AccumulateNV2",
    "Acos",
    "Acosh",
    "Add",
    "AddN",
    "AddV2",
    "All",
    "Angle",
    "Any",
    "ApproximateEqual",
    "ArgMax",
    "ArgMin",
    "Asin",
    "Asinh",
    "Atan",
    "Atan2",
    "Atanh",
    "BatchMatMul",
    "BatchMatMulV2",
    "BatchMatMulV3",
    "Betainc",
    "Bincount",
    "Bucketize",
    "Cast",
    "Ceil",
    "ClipByValue",
    "Complex",
    "ComplexAbs",
    "Conj",
    "Cos",
    "Cosh",
    "Cross",
    "Cumprod",
    "Cumsum",
    "DenseBincount",
    "Digamma",
    "Div",
    "DivNoNan",
    "Equal",
    "Erf",
    "Erfc",
    "Erfinv",
    "EuclideanNorm",
    "Exp",
    "Expm1",
    "Floor",
    "FloorDiv",
    "FloorMod",
    "Greater",
    "GreaterEqual",
    "HistogramFixedWidth",
    "Igamma",
    "Igammac",
    "Imag",
    "Inv",
    "IsFinite",
    "IsInf",
    "IsNan",
    "Less",
    "LessEqual",
    "Lgamma",
    "Log",
    "Log1p",
    "LogicalAnd",
    "LogicalNot",
    "LogicalOr",
    "MatMul",
    "Max",
    "Maximum",
    "Mean",
    "Min",
    "Minimum",
    "Mod",
    "MulNoNan",
    "Multiply",
    "Ndtri",
    "Negate",
    "NextAfter",
    "NotEqual",
    "Polygamma",
    "Pow",
    "Prod",
    "QuantizeDownAndShrinkRange",
    "QuantizedAdd",
    "QuantizedMatMul",
    "QuantizedMul",
    "RaggedBincount",
    "Range",
    "Real",
    "RealDiv",
    "Reciprocal",
    "RequantizationRange",
    "Requantize",
    "Rint",
    "Round",
    "Rsqrt",
    "SegmentMax",
    "SegmentMaxV2",
    "SegmentMean",
    "SegmentMin",
    "SegmentMinV2",
    "SegmentProd",
    "SegmentProdV2",
    "SegmentSum",
    "SegmentSumV2",
    "SelectV2",
    "Sigmoid",
    "Sign",
    "Sin",
    "Sinh",
    "SparseBincount",
    "SparseMatMul",
    "SparseSegmentMean",
    "SparseSegmentMeanGrad",
    "SparseSegmentMeanGradV2",
    "SparseSegmentMeanWithNumSegments",
    "SparseSegmentSqrtN",
    "SparseSegmentSqrtNGrad",
    "SparseSegmentSqrtNGradV2",
    "SparseSegmentSqrtNWithNumSegments",
    "SparseSegmentSum",
    "SparseSegmentSumGrad",
    "SparseSegmentSumGradV2",
    "SparseSegmentSumWithNumSegments",
    "Sqrt",
    "Square",
    "SquaredDifference",
    "Subtract",
    "Sum",
    "Tan",
    "Tanh",
    "TruncateDiv",
    "TruncateMod",
    "UnsortedSegmentMax",
    "UnsortedSegmentMin",
    "UnsortedSegmentProd",
    "UnsortedSegmentSum",
    "Where3",
    "Xdivy",
    "Xlog1py",
    "Xlogy",
    "Zeta",
};

std::set<std::string> nn_ops = {
    "ApproxTopK",
    "AvgPool",
    "AvgPool3D",
    "AvgPool3DGrad",
    "BiasAdd",
    "BiasAddGrad",
    "Conv",
    "Conv2D",
    "Conv2DBackpropFilter",
    "Conv2DBackpropFilterV2",
    "Conv2DBackpropInput",
    "Conv2DBackpropInputV2",
    "Conv3D",
    "Conv3DBackpropFilterV2",
    "Conv3DBackpropInputV2",
    "DataFormatDimMap",
    "DataFormatVecPermute",
    "DepthwiseConv2dNative",
    "DepthwiseConv2dNativeBackpropFilter",
    "DepthwiseConv2dNativeBackpropInput",
    "Dilation2D",
    "Dilation2DBackpropFilter",
    "Dilation2DBackpropInput",
    "Elu",
    "FractionalAvgPool",
    "FractionalMaxPool",
    "FusedBatchNorm",
    "FusedBatchNormGrad",
    "FusedBatchNormGradV2",
    "FusedBatchNormGradV3",
    "FusedBatchNormV2",
    "FusedBatchNormV3",
    "FusedPadConv2D",
    "FusedResizeAndPadConv2D",
    "InTopK",
    "InTopKV2",
    "L2Loss",
    "LRN",
    "LogSoftmax",
    "MaxPool",
    "MaxPool3D",
    "MaxPool3DGrad",
    "MaxPool3DGradGrad",
    "MaxPoolGradGrad",
    "MaxPoolGradGradV2",
    "MaxPoolGradGradWithArgmax",
    "MaxPoolGradV2",
    "MaxPoolV2",
    "MaxPoolWithArgmax",
    "NthElement",
    "QuantizedAvgPool",
    "QuantizedBatchNormWithGlobalNormalization",
    "QuantizedBiasAdd",
    "QuantizedConv2D",
    "QuantizedMaxPool",
    "QuantizedRelu",
    "QuantizedRelu6",
    "QuantizedReluX",
    "Relu",
    "Relu6",
    "Selu",
    "Softmax",
    "SoftmaxCrossEntropyWithLogits",
    "Softplus",
    "Softsign",
    "SparseSoftmaxCrossEntropyWithLogits",
    "TopK",
};

std::set<std::string> no_op = {
    "NoOp",
};

std::set<std::string> parsing_ops = {
    "DecodeCSV",
    "DecodeCompressed",
    "DecodeJSONExample",
    "DecodePaddedRaw",
    "DecodeRaw",
    "ParseExample",
    "ParseExampleV2",
    "ParseSequenceExample",
    "ParseSequenceExampleV2",
    "ParseSingleExample",
    "ParseSingleSequenceExample",
    "ParseTensor",
    "SerializeTensor",
    "StringToNumber",
};

std::set<std::string> random_ops = {
    "Multinomial",     "ParameterizedTruncatedNormal",
    "RandomGamma",     "RandomNormal",
    "RandomPoissonV2", "RandomShuffle",
    "RandomUniform",   "RandomUniformInt",
    "TruncatedNormal",
};

std::set<std::string> sparse_ops = {
    "AddManySparseToTensorsMap",
    "AddSparseToTensorsMap",
    "DeserializeManySparse",
    "DeserializeSparse",
    "SerializeManySparse",
    "SerializeSparse",
    "SparseAdd",
    "SparseAddGrad",
    "SparseConcat",
    "SparseCross",
    "SparseCrossHashed",
    "SparseCrossV2",
    "SparseDenseCwiseAdd",
    "SparseDenseCwiseDiv",
    "SparseDenseCwiseMul",
    "SparseFillEmptyRows",
    "SparseFillEmptyRowsGrad",
    "SparseReduceMax",
    "SparseReduceMaxSparse",
    "SparseReduceSum",
    "SparseReduceSumSparse",
    "SparseReorder",
    "SparseReshape",
    "SparseSlice",
    "SparseSliceGrad",
    "SparseSoftmax",
    "SparseSparseMaximum",
    "SparseSparseMinimum",
    "SparseSplit",
    "SparseTensorDenseAdd",
    "SparseTensorDenseMatMul",
    "TakeManySparseFromTensorsMap",
};

std::set<std::string> state_ops = {
    "Assign",
    "AssignAdd",
    "AssignSub",
    "CountUpTo",
    "DestroyTemporaryVariable",
    "IsVariableInitialized",
    "ResourceCountUpTo",
    "ResourceScatterNdAdd",
    "ResourceScatterNdMax",
    "ResourceScatterNdMin",
    "ResourceScatterNdSub",
    "ResourceScatterNdUpdate",
    "ScatterAdd",
    "ScatterDiv",
    "ScatterMax",
    "ScatterMin",
    "ScatterMul",
    "ScatterNdAdd",
    "ScatterNdSub",
    "ScatterNdUpdate",
    "ScatterSub",
    "ScatterUpdate",
    "TemporaryVariable",
    "Variable",
};

std::set<std::string> string_ops = {
    "AsString",
    "DecodeBase64",
    "EncodeBase64",
    "ReduceJoin",
    "RegexFullMatch",
    "RegexReplace",
    "StringFormat",
    "StringJoin",
    "StringLength",
    "StringLower",
    "StringNGrams",
    "StringSplit",
    "StringSplitV2",
    "StringStrip",
    "StringToHashBucket",
    "StringToHashBucketFast",
    "StringToHashBucketStrong",
    "StringUpper",
    "Substr",
    "UnicodeScript",
    "UnicodeTranscode",
};

std::set<std::string> training_ops = {
    "ApplyAdadelta",
    "ApplyAdagrad",
    "ApplyAdagradDA",
    "ApplyAdam",
    "ApplyAddSign",
    "ApplyCenteredRMSProp",
    "ApplyFtrl",
    "ApplyFtrlV2",
    "ApplyGradientDescent",
    "ApplyMomentum",
    "ApplyPowerSign",
    "ApplyProximalAdagrad",
    "ApplyProximalGradientDescent",
    "ApplyRMSProp",
    "ResourceApplyAdadelta",
    "ResourceApplyAdagrad",
    "ResourceApplyAdagradDA",
    "ResourceApplyAdam",
    "ResourceApplyAdamWithAmsgrad",
    "ResourceApplyAddSign",
    "ResourceApplyCenteredRMSProp",
    "ResourceApplyFtrl",
    "ResourceApplyFtrlV2",
    "ResourceApplyGradientDescent",
    "ResourceApplyKerasMomentum",
    "ResourceApplyMomentum",
    "ResourceApplyPowerSign",
    "ResourceApplyProximalAdagrad",
    "ResourceApplyProximalGradientDescent",
    "ResourceApplyRMSProp",
    "ResourceSparseApplyAdadelta",
    "ResourceSparseApplyAdagrad",
    "ResourceSparseApplyAdagradDA",
    "ResourceSparseApplyCenteredRMSProp",
    "ResourceSparseApplyFtrl",
    "ResourceSparseApplyFtrlV2",
    "ResourceSparseApplyKerasMomentum",
    "ResourceSparseApplyMomentum",
    "ResourceSparseApplyProximalAdagrad",
    "ResourceSparseApplyProximalGradientDescent",
    "ResourceSparseApplyRMSProp",
    "SparseApplyAdadelta",
    "SparseApplyAdagrad",
    "SparseApplyAdagradDA",
    "SparseApplyCenteredRMSProp",
    "SparseApplyFtrl",
    "SparseApplyFtrlV2",
    "SparseApplyMomentum",
    "SparseApplyProximalAdagrad",
    "SparseApplyProximalGradientDescent",
    "SparseApplyRMSProp",
};

std::set<std::string> user_ops = {
    "Fact",
};

const std::set<std::string>& api_list() {
  static bool initialzied = false;
  static std::set<std::string> cpp_apis_;

  if (!initialzied) {
    cpp_apis_.insert(array_ops.begin(), array_ops.end());
    cpp_apis_.insert(candidate_sampling_ops.begin(),
                     candidate_sampling_ops.end());
    cpp_apis_.insert(control_flow_ops.begin(), control_flow_ops.end());
    cpp_apis_.insert(data_flow_ops.begin(), data_flow_ops.end());
    cpp_apis_.insert(image_ops.begin(), image_ops.end());
    cpp_apis_.insert(io_ops.begin(), io_ops.end());
    cpp_apis_.insert(logging_ops.begin(), logging_ops.end());
    cpp_apis_.insert(math_ops.begin(), math_ops.end());
    cpp_apis_.insert(nn_ops.begin(), nn_ops.end());
    cpp_apis_.insert(no_op.begin(), no_op.end());
    cpp_apis_.insert(parsing_ops.begin(), parsing_ops.end());
    cpp_apis_.insert(random_ops.begin(), random_ops.end());
    cpp_apis_.insert(sparse_ops.begin(), sparse_ops.end());
    cpp_apis_.insert(state_ops.begin(), state_ops.end());
    cpp_apis_.insert(string_ops.begin(), string_ops.end());
    cpp_apis_.insert(training_ops.begin(), training_ops.end());
    cpp_apis_.insert(user_ops.begin(), user_ops.end());
    initialzied = true;
  }
  return cpp_apis_;
}

const std::set<std::string>& ignore_list() {
  static std::set<std::string> ignore_list_ = {
      "Concat",
      "AdjustContrast",
      "Stack",
  };
  return ignore_list_;
}

bool is_cpp_api(const std::string& op_name) {
  if (api_list().find(op_name) == api_list().end()) return false;
  if (ignore_list().find(op_name) != ignore_list().end()) return false;
  return true;
}

}  // namespace tf_cpp_apis
